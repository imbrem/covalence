(
(assume a0 (forall ((x S)) (=> (Human x) (Mortal x))))
(assume a1 (! (Human Socrates) :named @p_1))
(assume a2 (! (not (! (Mortal Socrates) :named @p_2)) :named @p_3))
(step t0 (cl (! (=> (forall ((x S)) (or (not (Human x)) (Mortal x))) (! (or (! (not @p_1) :named @p_5) @p_2) :named @p_6)) :named @p_9) (forall ((x S)) (or (not (Human x)) (Mortal x)))) :rule implies_neg1)
(anchor :step t1)
(assume t1.a0 (forall ((x S)) (or (not (Human x)) (Mortal x))))
(step t1.t0 (cl (or (! (not (forall ((x S)) (or (not (Human x)) (Mortal x)))) :named @p_8) @p_6)) :rule forall_inst :args (Socrates))
(step t1.t1 (cl @p_8 @p_6) :rule or :premises (t1.t0))
(step t1.t2 (cl @p_6) :rule resolution :premises (t1.t1 t1.a0))
(step t1 (cl @p_8 @p_6) :rule subproof :discharge (t1.a0))
(step t2 (cl @p_9 @p_6) :rule resolution :premises (t0 t1))
(step t3 (cl @p_9 (! (not @p_6) :named @p_7)) :rule implies_neg2)
(step t4 (cl @p_9 @p_9) :rule resolution :premises (t2 t3))
(step t5 (cl @p_9) :rule contraction :premises (t4))
(step t6 (cl @p_8 @p_6) :rule implies :premises (t5))
(step t7 (cl @p_7 @p_5 @p_2) :rule or_pos)
(step t8 (cl @p_2 @p_5 @p_7) :rule reordering :premises (t7))
(step t9 (cl @p_7) :rule resolution :premises (t8 a2 a1))
(step t10 (cl (not (! (= (forall ((x S)) (=> (Human x) (Mortal x))) (forall ((x S)) (or (not (Human x)) (Mortal x)))) :named @p_4)) (not (forall ((x S)) (=> (Human x) (Mortal x)))) (forall ((x S)) (or (not (Human x)) (Mortal x)))) :rule equiv_pos2)
(step t11 (cl @p_4) :rule hole :args ("TRUST_THEORY_REWRITE" @p_4 13 7))
(step t12 (cl (forall ((x S)) (or (not (Human x)) (Mortal x)))) :rule resolution :premises (t10 t11 a0))
(step t13 (cl) :rule resolution :premises (t6 t9 t12))
)